{
	"id": "b5c0d4e7ead1d8ba59de7df487d03c78",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.5.0",
	"solcLongVersion": "0.5.0+commit.1d4f565a",
	"input": {
		"language": "Solidity",
		"sources": {
			"Week20-Day2-Activity5.sol": {
				"content": "/*\n\nTrade Controllers\n-----------------\nIn this activity, you’ll gain practical experience with using conditional statements in Solidity. You’ll use basic logical operators and a control flow to build a smart contract that tracks trades in the Ethereum blockchain.\n\nInstructions\n------------\n1. Create a basic smart contract, named `TradeController`, as follows:\n\n    pragma solidity ^0.5.0;\n\n    contract TradeController {\n    // insert code here\n    }\n\n2. Define two variables: a `uint` variable named `previousPrice` and a `string` variable named `tradeType`.\n\n    **Note** You use a `uint` variable to contain the previous price. This is because the price will always be a positive value. You’ll never have a negative price. You use `string` for the `tradeType` variable because its value can be “Buy”, “Sell”, or “Hold”.\n\n3. Create a `public` function named `makeTrade`. This function should take a `uint` argument named `currentPrice` that represents the current price of the asset.\n\n4. In the body of the `makeTrade` function, define a conditional statement that checks if the current price is less than the previous price. If this condition is true, set the `tradeType` variable to “Buy” and the previous price equal to the current price.\n\n    **Hint** Just like in Python, an `if` statement in Solidity consists of the `if` keyword followed by a condition that evaluates to true or false. Unlike in Python, parentheses surround the condition in Solidity.\n\n5. Add a new `bool` argument to the `makeTrade` function, and name it `buyAnyway`.\n\n6. Place `|| buyAnyway` at the end of the condition. This will allow the function to return `true` even if the current trade price is greater than the previous price. You might want to buy anyway, regardless of the previous price! Here’s the condition:\n\n    if (currentPrice < previousPrice || buyAnyway)\n\n   **Hint** The symbol consisting of two vertical bars ( `||` ) represents the logical OR operator. Python defines most logical operators with keywords in plain English, like `and`, `or`, and `not`. But, Solidity uses symbols. Two ampersands ( `&&` ) means AND, two vertical bars ( `II` ) means OR, and an exclamation point ( `!` ) means NOT. You can learn more about the logical operators in the [Booleans](https://docs.soliditylang.org/en/v0.5.0/types.html#booleans) section of the Solidity documentation.\n    In plain English, this `if` statement now says the following: if the `currentPrice` value is less than the `previousPrice` value, or if `buyAnyway` is set to `true`, then continue.\n\n7. Add an `else if` statement with a condition that checks if `currentPrice` is less than `previousPrice` so that we know when to sell.\n\n8. For the case when the first two conditions evaluate to `false`, add a final `else` statement. In this statement, set `tradeType` to “Hold”, because you don’t want to buy or sell in this scenario.\n\n9. Compile your smart contract. If an error occurs, review your code, and make the necessary changes for a successful compilation.\n\n*/\n\npragma solidity ^0.5.0;\n\ncontract TradeController {\n\n\n}\n\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"Week20-Day2-Activity5.sol": {
				"TradeController": {
					"abi": [],
					"devdoc": {
						"methods": {}
					},
					"evm": {
						"assembly": "    /* \"Week20-Day2-Activity5.sol\":3077:3107  contract TradeController {... */\n  mstore(0x40, 0x80)\n  callvalue\n    /* \"--CODEGEN--\":8:17   */\n  dup1\n    /* \"--CODEGEN--\":5:7   */\n  iszero\n  tag_1\n  jumpi\n    /* \"--CODEGEN--\":30:31   */\n  0x0\n    /* \"--CODEGEN--\":27:28   */\n  dup1\n    /* \"--CODEGEN--\":20:32   */\n  revert\n    /* \"--CODEGEN--\":5:7   */\ntag_1:\n    /* \"Week20-Day2-Activity5.sol\":3077:3107  contract TradeController {... */\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x0\n  codecopy\n  0x0\n  return\nstop\n\nsub_0: assembly {\n        /* \"Week20-Day2-Activity5.sol\":3077:3107  contract TradeController {... */\n      mstore(0x40, 0x80)\n      0x0\n      dup1\n      revert\n\n    auxdata: 0xa165627a7a723058203f54ef589af6bfb7fdb38777aac5602e4795f5efe187ce66713bf0c2345730920029\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "6080604052348015600f57600080fd5b50603580601d6000396000f3fe6080604052600080fdfea165627a7a723058203f54ef589af6bfb7fdb38777aac5602e4795f5efe187ce66713bf0c2345730920029",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x35 DUP1 PUSH1 0x1D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH6 0x627A7A723058 KECCAK256 EXTCODEHASH SLOAD 0xef PC SWAP11 0xf6 0xbf 0xb7 REVERT 0xb3 DUP8 PUSH24 0xAAC5602E4795F5EFE187CE66713BF0C23457309200290000 ",
							"sourceMap": "3077:30:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3077:30:0;;;;;;;"
						},
						"deployedBytecode": {
							"linkReferences": {},
							"object": "6080604052600080fdfea165627a7a723058203f54ef589af6bfb7fdb38777aac5602e4795f5efe187ce66713bf0c2345730920029",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH6 0x627A7A723058 KECCAK256 EXTCODEHASH SLOAD 0xef PC SWAP11 0xf6 0xbf 0xb7 REVERT 0xb3 DUP8 PUSH24 0xAAC5602E4795F5EFE187CE66713BF0C23457309200290000 ",
							"sourceMap": "3077:30:0:-;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "10600",
								"executionCost": "66",
								"totalCost": "10666"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 3077,
									"end": 3107,
									"name": "PUSH",
									"value": "80"
								},
								{
									"begin": 3077,
									"end": 3107,
									"name": "PUSH",
									"value": "40"
								},
								{
									"begin": 3077,
									"end": 3107,
									"name": "MSTORE"
								},
								{
									"begin": 3077,
									"end": 3107,
									"name": "CALLVALUE"
								},
								{
									"begin": 8,
									"end": 17,
									"name": "DUP1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "ISZERO"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "PUSH [tag]",
									"value": "1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "JUMPI"
								},
								{
									"begin": 30,
									"end": 31,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 27,
									"end": 28,
									"name": "DUP1"
								},
								{
									"begin": 20,
									"end": 32,
									"name": "REVERT"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "tag",
									"value": "1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "JUMPDEST"
								},
								{
									"begin": 3077,
									"end": 3107,
									"name": "POP"
								},
								{
									"begin": 3077,
									"end": 3107,
									"name": "PUSH #[$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 3077,
									"end": 3107,
									"name": "DUP1"
								},
								{
									"begin": 3077,
									"end": 3107,
									"name": "PUSH [$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 3077,
									"end": 3107,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 3077,
									"end": 3107,
									"name": "CODECOPY"
								},
								{
									"begin": 3077,
									"end": 3107,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 3077,
									"end": 3107,
									"name": "RETURN"
								}
							],
							".data": {
								"0": {
									".auxdata": "a165627a7a723058203f54ef589af6bfb7fdb38777aac5602e4795f5efe187ce66713bf0c2345730920029",
									".code": [
										{
											"begin": 3077,
											"end": 3107,
											"name": "PUSH",
											"value": "80"
										},
										{
											"begin": 3077,
											"end": 3107,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 3077,
											"end": 3107,
											"name": "MSTORE"
										},
										{
											"begin": 3077,
											"end": 3107,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 3077,
											"end": 3107,
											"name": "DUP1"
										},
										{
											"begin": 3077,
											"end": 3107,
											"name": "REVERT"
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.5.0+commit.1d4f565a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"Week20-Day2-Activity5.sol\":\"TradeController\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"Week20-Day2-Activity5.sol\":{\"keccak256\":\"0x97dbc07d2432e95bafd0a27cfb776cf5e6b20afa1469142fae46a9da015fce45\",\"urls\":[\"bzzr://c41ab35004bab708b44d933ed899e8b41e25898dd35b7b7602d7e14b76ace74b\"]}},\"version\":1}",
					"userdoc": {
						"methods": {}
					}
				}
			}
		},
		"sources": {
			"Week20-Day2-Activity5.sol": {
				"ast": {
					"absolutePath": "Week20-Day2-Activity5.sol",
					"exportedSymbols": {
						"TradeController": [
							2
						]
					},
					"id": 3,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "3052:23:0"
						},
						{
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": null,
							"fullyImplemented": true,
							"id": 2,
							"linearizedBaseContracts": [
								2
							],
							"name": "TradeController",
							"nodeType": "ContractDefinition",
							"nodes": [],
							"scope": 3,
							"src": "3077:30:0"
						}
					],
					"src": "3052:57:0"
				},
				"id": 0
			}
		}
	}
}